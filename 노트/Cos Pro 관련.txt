===== [2] 는 ? 추가 첨부 한 것

[모의고사 준비]
프로그래머스 COS 1급 모의고사

파트1. 빈 칸 채우기 (4 / 4)
	스택으로 큐 구현
		[2] easy
		
	지그재그 부분 수열

	Up and down
		숫자 맞추기 처럼 비교해서 UP, DOWN 하는데,
		2 여서 UP 한 뒤, 3이나 그 이상을 불러야하는데
		다시 1 을 부른 경우(적게 부른 경우)
		그래서 max 로 큰 값을 선택해야... , => max(left, num) 이런 식으로 
		나는 num+1 로 했었는데...
(*) 함정
		[2]비교하거나 할 경우 min(), max() 활용 해야
		[2-2] 다시 테스트 해보니
		    left = num+1 if num >= left else left   # 3rd
            . . .
            right = num-1 if num <= right else right   # 3rd
(**)        이런 식으로 해야

	아르바이트,판매사원	
		클래스 상속 관련
			class 자식클래스(부모클래스):
				... 내용 ...
		
		함수 선언 시 -> self 넣어줘야 한다는...		
			def get_salary(self)

	[2]--------------------------------------------------
	상속 정리

	Python의 Class와 상속(inheritance)의 개념
	. Python 문법에서의 상속(inheritance)란, 부모 클래스(Super Class)의 속성(property)과 함수(method)를 그대로 물려 받는 개념입니다.
	. Super Class의 내용을 자식 클래스(Sub Class)가 물려 받게 되면, Super Class의 속성과 함수를 자식 클래스에서 사용할 수 있습니다.
(**)
	. class 에 속한 함수 (method)는 첫 번째 인자로 self를 입력합니다. (사실 self가 아니어도 상관없지만, 일반적으로 self를 많이 사용합니다.)
	. 자식클래스의 함수를 재정의하게 되면, 재정의된 함수로 실행되게 됩니다.

		[예]
		class Person:
			...
			# 생성자 메서드(method)
			def __init__(self):
				self.name = '홍길동'
				...

	상속 받을 경우 -> 괄호 안에 부모 클래스 써줌

		class Student(Person):
			"""Sub Class"""
			def __init__(self):
(**)
				super().__init__()   # 부모클래스 부를 땐 super
	[2]<<--------------------------------------------------
	
파트2. 한 줄 바꾸기 (3 / 3)

(*)
[이부분은 pycharm 에 붙여 놓고 빨리 돌려보는게 관건] !!
[말이 쉽지 어려움]

	종이접기
		이부분은 이해 안감 !!!
		[2] 문제
			4 x 4 크기인 정사각형 종이가 1 x 1 크기인 격자 칸으로 나누어져 있습니다. 
			이 종이를 가로축 혹은 세로축에 평행한 격자 선을 따라 한 번 접었을 때, 만나는 격자 칸에 적힌 숫자의 합이 최대가 되도록 하려 합니다. 
			종이를 접을 때는 만나는 격자 칸이 정확히 일치하도록 해야 합니다.
		
			4 * 4 를 점선에 따라 접으면 
			1,2 번째 만나는 경우, 1,4 and 2,3 만나는 경우
			3,4 만나는 경우 있음
([2-2] pass)
이런건 너무 헷갈림 ->			
			for i in range(4):
				for j in range(4):
					for k in range(j + 1, 4, 2):
						answer = max(answer, max(grid[i][j] + grid[i][k], grid[j][i] + grid[k][i])) 
						#answer = max(answer, max(grid[i][j] + grid[j][k], grid[j][k] + grid[k][i]))
						...
	보드게임
		감으로 맞춤
		[2] 문제
			A 게임은 4x4 격자 모양의 보드의 가장 왼쪽 위에서 가장 오른쪽 아래로 말을 이동시키면서 각 구역에 있는 코인을 획득하는 게임입니다. 
			이때, 말은 오른쪽 또는 아래쪽으로만 이동할 수 있습니다.
			coins[i][j] = board[i][j] + max(coins[i-1][j], coins[i][j-1])
			-> 오른쪽와 아래쪽 을 비교해서 더한다
		([2-2] 두 번째는 천천히 도출)

	카드셔플
		pycharm 에 붙여서 찍어 봄


파트3. 함수 작성 (1 / 3)

	꽃피우기
		2차원 리스트 상하좌우... 문제
		[2] 1번 수행한 것을 기억해야 해서.. 
			실제 시험에선 시간 많이 걸릴 듯

		[2-2]
		  - 초기셋팅으로 한번 돌리고...
		    꽂이 핀 곳을 qu 에 넣고 ..
		    시작한다.
		  - 재차 풀어보던 중 상하좌우를 돌다가 cnt 가 중복되는 현상 발생
		    (*)곱하기 4 됨

	숫자 뽑기
		자연수가 들어있는 리스트에서 숫자 K개를 선택하려 합니다. 
		이때, 선택한 숫자 중 가장 큰 수와 가장 작은 수의 차이가 최소가 되도록 해야합니다.
		
		헐!! 
		from itertools import combinations
		tmp = list(combinations(arr, 4)) 콤비네이션으로 했더니 시간 제약에 걸림
		
		단순히 소팅한 다음에 앞에서 4개 선택 for 로 [마지막에서4 앞~ 마지막] 까지
            예) [4, 6, 9, 9, 11, 19]
                index 3 0    : arr[i + K - 1] - arr[i]
                      4 1
                      5 2
        [2-2] 이건 DFS 로 ...

	메모장
		다 풀었다고 생각했는데, 72 점 나옴
		이상한 케이스 있는 듯
		이런게 변수가 될 듯 !!

------------------------------------------------------------
[코드랑 => 회사 강의]

이차원 배열 회전

	배열을 조그만하게 만들고 해보면 될 듯

	1 2 3
	4 5 6
	7 8 9

	오른쪽 90도
	7 4 1
	8 5 2
	9 6 3

(*)
이건 메모장 같은데 써보자..

	위치가 어디로 갔는지 나열해본다
	[0][0] -> [0][2]
	[0][1] -> [1][2]
	[0][2]    [2][2]
	[1][0]    [0][1]
	[1][1]    [1][1]

	우와 j 가 i 로 가고
	i 는 j 로 가면서 반대로


	5*5 이차원 배열을 0으로 채우는거 
	tmp = [[0 for i in range(5)] for j in range(5)]

	왼쪽도 해보면
	3 6 9
	2 5 8
	1 4 7

	[0][0] -> [2][0]
	[0][1]    [1][0]
	[0][2]    [0][0]
	[1][0]    [2][1]
	[1][1]    [1][1]

	i 가 j 로 그대로 가고
	j는 i 로 가면서 반대로

------------------------------------------------------------

	이차원배열 상하좌우 방향 판단
	[4,4] 기준으로 상하좌우
	???

		 [3,4]
	[4,3][4,4][4,5]
		 [5,4]
		 
	상하 좌우로
	[-1,1,0,0] 행에 대한 변화
	[0,0,-1,1] 열에 대한 변화

	dx = [-1,1,0,0]
	dy = [0,0,-1,1]

	posX = 0
	posY = 0

	for i in range(4):
		nx = posX + dx[i]
		ny = poxY + dy[i]

		if 	/* 배열 범위를 벗어나지 않았는지 chk */
			/* chk 배열을 통해 방문한 적이 있는지 chk */
			/* 다음 좌표에 길이 있는지 chk */


------------------------------------------------------------

재귀호출
	재귀함수
	  - A 함수에서 자기 자신인 A 함수를 다시 호출하는 방식
	  - A 함수 내에서 A 함수를 재 호출하면 A 함수 호출 코드 이후에
	    작성된 코드는 재 호출된 함수가 종료하기 전에는 실행되지 않는다
	  - A 함수가 호출된 후 함수 종료가 반드시 이뤄져야 하므로 해당 코드 확인
	  - 스택 이용


------------------------------------------------------------

	최대 공약수
	- 2개의 자연수의 공통된 약수 중 가장 큰 정수
	
	[예 6과 8의 최대 공약수]
	  -> 6의 약수는 1,2,3,6 이고, 8의 약수는 1,2,4,8 이므로
	               --                   --
	  -> 두 자연수 6과 8의 최대공약수(GCD) 는 2임
	  
	. 만약 1과 자기 자신밖에 약수가 존재하지 않으면 '소수' 이다
	
	
	**
	유클리드 호제법
	  def gcd(a, b):
		while b!= 0 :
			r = a%b   # a 가 더 큰.. 바뀌어도 된다 함
			a = b
			b = r
		return a
	----------------------------------------------------------------------
	** b 가 0 이 아닐동안 r=a%b a=b b=r (이걸 외워.. b0 아닐동안 r a%b ab br)
	----------------------------------------------------------------------
	
	
	최소 공배수
	- 공배수란, 이름에서 알수 있듯이 두수 혹은 그 이상의 수들의 공통인 배수라는 뜻
	- 최소 공배수는 당연히 공배수 중에서 가장 작은 것. 두 수 a, b 의 최소 공배수를
	  기호로 lcm(a, b) 로 표기한다
	
	[예 3과 4의 최소 공배수]
	  -> 3의 배수는 3,6,9,12,15, ... 이고, 4의 배수는 4,8,12,16, ... 이므로
	                   --                         --
	  -> 두 자연수 3과 4의 최소공배수(LCM) 는 12임

		[2]
		# 최소공배수(Least common multiple)
		def lcm(a, b) :
			return a*b // gcd(a, b)  # 필요한 건 몫

		
		배열에서 LCM 구하는 경우
		LCM = numlist[0]  # 첫번째 수 넣고

		for i in range(1, len(numlist)) :  # 두번째 부터 루핑
			LCM = lcm(LCM, numlist[i])
			#print(LCM)
			
------------------------------------------------------------
순열, 조합 [문제에 이 명칭이 나오지는 않음]

	순열
	- 서로 다른 원소를 가진 집합에서 대상들을 선택하여 순서 있게 배열 하는 것
	
	조합
	- 서로 다른 원소를 가진 집합에서 원소들을 택하여 만든 부분 집합, 
	  순서가 중요하지 않은 집함


	----------------------------------------------------------------------
	** 라이브러리 사용
	from itertools import permutations
	
	from itertools import combinations
	a = [1,2,3]
	combi = combinations(a,2)
	----------------------------------------------------------------------
	
------------------------------------------------------------

큐 사용하려면

from collections import deque

queue = deque([]) 

queue.append(...)

queue.popleft()


------------------------------------------------------------

백트래킹(Backtracking)
 - 가지치기

DFS 는 가능한 모든 경로를 탐색
 - visited 로 제한(?)

큰틀은 비슷
문제에서는 혼용 

-----

N Queen 문제

대각선 방향 ? 인덱스 변화

4 x 4 인 경우 2차원으로 만들 수도 있으나
1차원으로 좌표값만 넣어줘도 cover 됨

------------------------------------------------------------
------------------------------------------------------------
Cos Pro 모의고사 & 수업

https://campus.programmers.co.kr/


출제 빈도 높음
직접 푸는 것 연습 (5번)
1. Dictionary
2. 배열 - Direct Address Table

A 의 코드 값이 65 라는 걸 기억하기 그러면
ord(MAP[i][j]) - ord('A') 로 한다

    str = "ABBABDABAB"

    d = dict()

    for ch in str:
        ir ch not in d :  d[ch] = 0
        d[ch] += 1

    for i in range(26):
        ch = chr(ord('A') + i)
        if ch not in d: continue
        
        for x in range(d[ch]):
            print(ch, end = '')
            

***    
코드 리뷰식으로 공부하면 안되고
직접 짜보는 연습을 해야 한다... (정말 중요)



[화단 채우기]

현업 처럼
신중하게 코드를 분석해서 정확한 코드를 넣으면 좋겠지만
시간이 너무 짧다

이 문제를 맞추기 위해서는 
해당 알고리즘이 능숙해져 있는 상태에서 봐야, 
즉시 답이 보인다

이 문제의 알고리즘 : 플러드필
(BFS 로 불리기도)
  while -----
   1) now 선택
   2) 다음 갈 곳을 예약 걸기



# 위, 아래, 왼쪽, 오른쪽합을 구하는 프로그램
# for 문 탐색 기법 -> direct 탐색 or 방향배열탐색
    directY = [-1, 1, 0, 0]
    directX = [0, 0, -1, 1]

    sum =0

    for t in range(4):
        ny = dy + directY[t]
        nx = dx + directX[t]
        
        if ny < 0 or nx < 0 or ny >= 4 or nx >=4 : continue : # 범위 밖으로 넘어가면 sum 을 구하지 않는다
        sum += arr[ny][nx]
        

----------------------------------------

재귀호출 
  조합
  순열
  부분집합
  
3가지 유형 연습해야.. (별4)

먼저 주사위 던지기 문제. 연습

    path = []

    def run(lev):
        if lev == 3:
            print(path)
            return
        
        for i in range(1,7):
            path.append(i)
            run(lev + 1)
            path.pop()

    run(0)

재귀를 쓰는 이유.
n 중 for 문 일 경우


#1 -> 무한재귀호출 막는법
#2 -> 재귀호출이 여러개 있을때 어떻게?
#3 -> lvl 을 arg 로 넘기는.. +1 해서...

--------------------

P.Q   priority queue

pop 했을 때 - 우선순위 높은 게 나옴

파이썬 heapq ??

출제비중은 별2개 정도

--------------------

Binary Search
별 3개 반

a = [3, 15, 5, 3, 6, 2, 35, 77, 23, 125]

def bs(s, e, target):

    while s <= e :
        mid = (s + e) //2
        if a[mid] == target : return mid
        if a[mid] < target : s = mid + 1
        else : e = mid -1
    return -1

target = 35
a.sort()
print(a)

print(bs(0,9, 35))  # 범위 0부터 9까지

--------------------

클래스 문제는
대부분 solution 쪽에 틀린 곳 있음
점수 주는 문제라며


------------------------------------------------------------

	Tier 1 -->

	어떤것을 공부?

	 . Direct 탐색
	 . Flood Fill
	 
	 그래프
	   DFS
	   BFS 
	   
	 재귀호출
	   순열
	   조합
	   부분집합
	   
	 DAT
	 
	 Sort
	 
	 클래스 문법
	 
	 Dictionary
	 (hash)
	 
	<--
	함수 작성으로 공부


		Tier 2 -->>

		Priority Queue

		Union Find

		Binary Search

		Sliding Window
		 (two point 알고리즘)

		<<--

------------------------------------------------------------


class Person:
	total_count =0  # 클래스 변수
	def __init__(self): # 생성자 매서드
		self.name = '홍길동' # 인스턴스 변수
		self.age = 1
		Person.total_count += 1
	
	def introduce(self) : # 매서드
		print(f'이름은 {self.name} ')

p1 = Person()

--------------------

상속은
부모 클래스에 정의된 다양한 메서드, 클래스 변수를 그대로 활용할 수 있음



----------------------------------------
----------------------------------------

당일 아침 정리

1. 이차원 리스트

2. 최소공배수...

	import math
	 
	def lcm(a, b):
		return (a*b) // math.gcd(a, b)


	math 모듈에 최대공약수를 구하는 함수가 있으므로,

	두 자연수의 곱은 최소공배수와 최대공약수의 곱과 같다는 점을 이용하면 간단히 해결됩니다.

	+) COS에서는 math 모듈을 사용할 수 있다고 알고 있네요 ^^

------
(암기)
	def gcd(a, b):
		while b != 0 :
			r = a % b  # 나머지
			print('r, a, b ->', r, a, b)
			a = b
			b = r
			#print('r, a, b ->', r, a, b)
		return a


	def lcm(a, b):
		return a*b//gcd(a, b)

		
(아래 방법도 있음)
		
	import math
	a = 8
	b = 4
	res1 = math.gcd(a, b)
	res2 = math.lcm(a, b)
	print("gcd =", res1, "lcm =", res2)


(최소 공배수)
어느 순간 만나는 지점 
  버스 출발 시간이나
  10m, 15m 가는 사람이 트랙을 돌 때 만나는 점

(최대 공약수)  
어린이집에서 사탕 60개, 초콜릿 100개, 젤리 80개를 준비했다. 
아이들이 서로 싸우지 않도록 똑같이 나누어 봉지에 담는다고 하면 최대 몇 봉지까지 만들 수 있을까?


(* 루핑 돌려야 하면 이런식으로)
	answer = gcd(arr[0], arr[1])
	for i in range(2, len(arr)):
		answer = gcd(answer, arr[i])
	print(answer)


3. 재귀호출

(빠지는 조건, 형식)
	def gugudan1(dan, depth):
		if depth > 9:
			return

		print(dan, '*', depth, "=", dan * depth)
		gugudan1(dan, depth+1)


	dan = 2
	gugudan1(dan, 1)


4. 순열/조합


	# 순열
	from itertools import permutations

	lst1 = list(permutations(N, M))

	#print(lst1)
	for l in lst1 :
		print(l)

	print('--------------------')
	# 조합
	from itertools import combinations

	lst2 = list(combinations(N, M))

	for l in lst2 :
		print(l)


(이건 중복이 되는... 즉, (1 1) 등 가능 ... )
	combinations_with_replacement (중복 조합)
	출처: https://gksthf912.tistory.com/50 [decoding:티스토리]

	-->
	주사위 연습 .. 위에 있지만
		path = []

		def run(lev):
			if lev == 3:
				print(path)
				return
			
			for i in range(1,7):
				path.append(i)
				run(lev + 1)
				path.pop()

		run(0)
	<--

5. 한줄 if

그럼 기본적인 구문과 한 줄로 표현하는 구문의 차이를 알아보도록 하자.

결과 = A if 조건 else B if 조건 else C
출처: https://info-lab.tistory.com/303 [:: IT School :::티스토리]

	간단히 => A if 조건 else C

6. DFS

(팩토리얼 연습)
	def factorial(n):
		if n <= 1 :
			return 1

		tmp = factorial(n-1)
		#print(tmp)
		return n * tmp

	print(factorial(5))

(DFS)
	graph = [
		[],     # 0
		[2, 3], # 1  # 노드 1에 연결된 노드들
		[4, 5], # 2
		[6],    # 3
		[2, 5], # 4
		[2, 4], # 5
		[3, 7], # 6
		[6]     # 7
	]
	# 그림 '(0-5)그래프_샘플' 참조

	# 방문 정보를 기록하기 위한 리스트
	visited = [False] * 8
	print(visited)

	def dfs(n):
		print(n)
		visited[n] = True
		for nx in graph[n] : # 다음거
			if visited[nx] == False : # 방문 안했다
				dfs(nx)

	# 탐색 시작 노드 1을 넣어주며 dfs() 실행
	dfs(1)  # -> 1부터 시작이라는

(BFS)
	from collections import deque

	graph = [
		[],     # 0
		[2, 3], # 1  # 노드 1에 연결된 노드들
		[4, 5], # 2
		[6],    # 3
		[2, 5], # 4
		[2, 4], # 5
		[3, 7], # 6
		[6]     # 7
	]
	# 그림 '(0-5)그래프_샘플' 참조

	# 방문 정보를 기록하기 위한 리스트
	visited = [False] * 8

	def bfs(n):
		visited[n] = True
		qu = deque()
		qu.append(n)
		while qu :   # len(qu) > 0
			tmp = qu.popleft()
			print(tmp)
			for nx in graph[tmp] :
				if visited[nx] == False :
					qu.append(nx)
					visited[nx] = True

	bfs(1)
	
	
7. Sort


	def solution_bubble(tmplist):
		for i in range(len(tmplist)) :
			for j in range(len(tmplist)-1):
				if tmplist[j] > tmplist[j+1]:
					tmp = tmplist[j+1]
					tmplist[j + 1] = tmplist[j]
					tmplist[j] = tmp
			print(tmplist)

	def solution_select(tmplist): # 선택정렬
		#최소값 선택
		for i in range(len(tmplist)):
			minidx = i
			for j in range(i+1, len(tmplist)):
				if tmplist[j] < tmplist[minidx] :
					minidx = j
			if minidx != i :
				tmp = tmplist[i]
				tmplist[i] = tmplist[minidx]
				tmplist[minidx] = tmp
			print(tmplist)

	def solution_insert(tmplist): # 삽입정렬
		#타겟 숫자와 이전 원소 비교
		for i in range(1, len(tmplist)):
			bk = tmplist[i]
			idx = i -1
			while idx >= 0 and bk < tmplist[idx] :
				tmplist[idx+1] = tmplist[idx]
				idx -= 1 # 줄줄이 이동
			tmplist[idx+1] = bk
			print(tmplist)

	print('정렬')
	tmplist = [10, 2, 6, 4, 3, 7, 5]
	print(tmplist)
	print()
	solution_bubble(tmplist)   # 버블 정렬

	print()
	tmplist = [10, 2, 6, 4, 3, 7, 5]
	solution_insert(tmplist)   # 삽입 정렬

	print()
	tmplist = [10, 2, 6, 4, 3, 7, 5]
	solution_select(tmplist)   # 선택 정렬
