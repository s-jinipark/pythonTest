
# DFS 메서드 정의
def DFS(graph, v, visited) :
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end = ' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v] :
        if not visited[i] :
            DFS(graph, i, visited)


# 각 노드가 연결된 정보를 리스트 자료형으로 표현 (2차원 리스트)
graph = [
    [],
    [2, 3, 8],      # 노드 1에 연결된 노드들
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현 (1차원 리스트)
visited = [False] * 9

# 정의된 DFS 함수 호출
DFS(graph, 1, visited)

'''
DFS 동작 과정

1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다. 방문 처리는 스택에 한 번 삽입되어 처리된 노드가 
다시 스택에 삽입되지 않도록 체크하는 것을 의미한다. 방문 처리를 함으로써 각 노드를 한 번씩만 처리할 수 있다.
2. 스택의 최상단 노드(가장 마지막에 방문한 노드)에 방문하지 않은 인접 노드(연결된 노드)가 있으면, 
그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 
(최상단 노드에 연결된 노드를 모두 방문했기 때문)
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다. (스택이 빌 때까지)
 

DFS 특징

스택 자료구조에 기초한다는 점에서 구현이 간단하다.
실제로는 스택을 쓰지 않아도 되며, 탐색을 수행함에 있어서 데이터의 개수가 N개인 경우 O(N)의 시간이 소요된다.
실제 구현은 재귀 함수를 이용했을 때 매우 간결하게 구현할 수 있다.

'''

'''
그래프 (Graph)
그래프는 노드(Node) 와 간선(Edge)으로 표현된다.

. 노드 (Node) : 정점(Vertex)
. 간선 (Edge) : 정점과 정점을 연결하는 선


   노드             0
   ／ ＼           ／ ＼
  ／   ＼        7／   ＼5
 ／     ＼       ／     ＼  
노드    노드     1        2

프로그래밍에서 그래프는 크게 2가지 방식으로 표현할 수 있다.

1. 인접 행렬 (Adjacency Matrix)
2. 인접 리스트 (Adjacency List)

* 인접 행렬
┌---------┬----------┬---------┬---------┐
│연결 관계  │ 0 (정점) │ 1 (정점) │ 2 (정점) │
├---------┼----------┼---------┼---------│
│0 (정점)  │ 0(가중치) │ 7       │ 5       │
├---------┼----------┼---------┼---------│
│1 (정점)  │ 7        │ 0       │ 무한    │
├---------┼----------┼---------┼---------│
│2(정점)   │ 5        │ 무한     │ 0      │ 
└---------┴----------┴---------┴---------┘

#소스 start-->>
    # 무한 비용 초기화
    INF = 999999999
    
    # 2차원 리스트를 이용해 인접행렬 표현
    graph = [
        [0, 7, 5],
        [7, 0, INF],
        [5, INF, 0]
    ]
    
    print(graph)
#<<-- 소스 end
??? 


* 인접 리스트 (Adjacency List)
인접 리스트 방식에서는 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장하는 방식으로,  
연결 리스트 자료구조를 이용해 구현하는데 파이썬에서는 2차원 리스트를 이용하면 된다.

#소스 start-->>
    # 노드가 3개이므로 행이 3개인 2차원 리스트로 인접리스트 표현
    # graph = [[], [], []]
    graph = [[] for _ in range(3)]
    
    # 노드 0에 연결된 노드 정보 저장 (노드, 거리)
    # 노드 0은 노드 1, 2와 연결되어 있음
    # graph = [[(1, 7), (2, 5)], [], []]
    graph[0].append((1, 7))
    graph[0].append((2, 5))
    
    # 노드 1에 연결된 노드 정보 저장 (노드, 거리)
    # 노드 1은 노드 0과 연결되어 있음
    # graph = [[(1, 7), (2, 5)], [(0, 7)], []]
    graph[1].append((0, 7))
    
    # 노드 2에 연결된 노드 정보 저장 (노드, 거리)
    # 노드 2은 노드 0과 연결되어 있음
    # graph = [[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]
    graph[2].append((0, 5))
    
    print(graph)
#<<-- 소스 end
'''