
# 예제 2 연습
'''
규칙
 ( 이 나오면 쇠막대기가 쌓인다는 얘기고
() 가 나오면 레이저.. 스택에 있는 나머지 ((( 갯수 카운트 ,
여기서 다시 () 가 나오면 ? -> 또 카운트
다음으로 ) 가 나오면 빼내면서 +1
'''
inp = "()(((()())(())()))(())"

stk = []
cnt = 0

for i in inp:
    print(i)
    if i == '(' :
        stk.append('(')
    elif i == ')' :
        #맨 위 확인
        if stk[-1] == '(' :
            # 이 경우 하나 빼고 stk size 를 cnt 에 더함
            stk.pop()
            #cnt = cnt + len(stk)
            cnt += len(stk)  # 어! 이거 안되는 줄 알았음
        else :
            # 스택에 넣지 않고 + 1
            cnt = cnt +1

print(cnt)

print("--------------------")
# 예제 2 연습
'''
순열로 풀면 될 거 같은데, 일단 교재에 있는 스택으로 ..

규칙 
지워서 가장 큰 수를 찾는 거
-> 순서가 바뀌지는 않는다
우선 스택에 넣고 , 다음값과 비교해서 큰 수가 오면 

스택에서 기존거 빼고 , 다음거를 넣어준다.
이 때, 지울 수 있는 수를 초과했는지 확인 !!
- 지울 수 없을 경우는 이후 값들을 하나씩 붙여서 max 찾는다.   
'''

# N 자리 숫자가 주어졌을 때, 여기서 숫자 K 를 지워서 얻을 수 있는 가장 큰 수 ??
#n, k = 4,2
#num = '1924'
#n, k = 7,3
#num = '1231234'
n, k = 10,4
num = '4177252841'

## ==>>
# stk = []
# stk.append(num[0])  # 맨 처음 값을 넣어 놈
# remove_cnt = 0
#
# for i in range(1, n):
#     print(num[i])
#     if stk[-1] < num[i] : # 새로운 값이 커
#         if remove_cnt < k : # 지운 횟수도 적다면
#             stk.pop()  # 빼
#             remove_cnt += 1
#         stk.append(num[i]) # 새로운 값을 넣는 거지
#     elif stk[-1] == num[i] : # 같을 경우 뒤에 짬뽕해도 될 거 같았으나, 보기 쉽게 ...
#         stk.append(num[i])
#     else :  # 새로운 값이 적어
#         stk.append(num[i])  # 합류
#     print(stk)
## <<==

# 맨 앞자리만 뺐는데, 루핑돌면서 계속 빼줘야 함. ㅠ
# 마지막 케이스가 ['4', '7', '7', '5', '8', '4', '1'] 이렇게 나옴

'''
(2)규칙 

우선 스택에 넣고 , 다음값과 비교해서 큰 수가 오면 

스택에서 기존거 빼고 , 다음거를 넣어준다.
(2) 여기서 루핑을 돌면서, 
이 때, 지울 수 있는 수를 초과했는지 확인 !!
- 지울 수 없을 경우는 이후 값들을 하나씩 붙여서 max 찾는다.   
  (2) 이거는 ?? 글쎄.. 필요 없어 보임
'''

### ==>>
# stk.clear()
# cnt = k
# number = list(num)
# print(number)
# for i in number:
#     print(i)
#     while stk and cnt > 0 and stk[-1] < i :  # 답보고 풀음, 여기가 잘 정리가 안 되서 ..
#         #del stk[-1]
#         stk.pop()  # 여기는 pop 으로 바꿔도 됨
#         cnt -= 1
#     stk.append(i)
#
# print(stk)
### <<==

'''
[책 인용]
이 문제에 스택이 필요하다는 것을 깨닫기까지가 힘들고
그 후에는 구현 역량에 달려 있음 ... 
'''
