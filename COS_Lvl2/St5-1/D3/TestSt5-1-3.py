
def adjacent(x) :
    for i in range(x):
        #print(row)
        if row[x] == row[i] or abs(row[x] - row[i]) == x -i :
            print('F')
            return False
    return True

def dfs(x) :
    global  result

    if x == N :
        result += 1
    else :
        # 각 행에 퀸 놓기
        for i in range(N) :  # i 는 열번호 0 부터 N 전까지 옮겨 가면서 유망한 곳 찾기
            row[x] = i  # [x, i] 에 퀸을 놓겠다
            print(row)
            # for 문이 돌면서 첫번째 퀸을 첫번째 열부터 쭉 체크하게 된다.
            # 예를 들어 n =4 이면 (0,0) (0,1) (0,2) (0,3) 을 체크한다.
            if adjacent(x) :
                print("call " , x+1)
                dfs(x+1)
        #print("-----")

N = 2
row = [0] * 2
result = 0
#print(row)
dfs(0)   # 얘는 0 부터 시작임 ??
print(result)


'''
[2]
https://kom-story.tistory.com/348


N = 2 를 테스트 해보면 
[0, 0] 0 0 True     # 0 0 에 퀸을 놓는다
call  1             # 놓을 데가 없으니 다음 칸
[0, 0] 1 0 False    # 다음 칸의 0 (1,0)
[0, 1] 1 1 False    # 다음 칸의 1 (1,1)
[1, 1] 0 1 True     # 아까 0 0 다은으로 0 1 로 간다
call  1             # 놓을 데가 없으니 다음 칸
[1, 0] 1 0 False    # 다시 반복 (1,0)
[1, 1] 1 1 False    # 다시 반복 (1,1)

'''

'''
문제
. N*N 체스판에 퀸 N 개를 놓는다
. 퀸의 좌우상하 대각선에 다른 퀸이 없어야 한다
. 그렇게 N개를 놓는 경우의 수를 출력하라

[백준] 9663 N-Queen 파이썬 풀이 (백트래킹)
https://sso-feeling.tistory.com/415?category=913126
-> 잘 모르겠음


row[i] = j 는 다음과 같이 해석될 수 있다.
"퀸을 [i, j] 위치에 놓겠다."

퀸의 위치를 정하고 나서는, 해당 위치에 퀸을 놓을 수 있는지 없는지 adjacent 함수를 통해서 판단한다.

퀸을 놓지 못하는 경우는 2가지이다.

1) 같은 열에 다른 퀸이 있는 경우
이 경우는, row라는 배열 안에 같은 값이 있는지 없는지를 확인하면 된다.
즉, row[i] = j 라고 정의한 것에서 동일한 j 값이 있는지 보겠다는 것이다. 
  퀸의 위치가 기록되는 값은 [i , j]라고 보면 이해하기 쉽다.
 
2) 왼쪽 대각선, 오른쪽 대각선에 다른 퀸이 있는 경우.
우리는 퀸을 맨 윗 행부터 차례로 채우고 있다.
따라서 대각선을 확인할 때 현재 i보다 큰 값들은 확인할 필요 없이 i보다 작은 곳, 즉 체스판의 위쪽만 확인하면 된다.
대각선에 위치한 퀸을 확인하기 위해서는 그들 간 인덱스의 관계를 활용하면 O(1)번만에 확인할 수 있다.
첫 번째로, 왼쪽 위 대각선의 값들을 살펴보자.
만약에 현재 퀸을 놓은 위치가 (3, 3)라고 가정하면, 왼쪽 대각선의 좌표는 각각 (2, 2), (1, 1), (0, 0)이 된다.
여기서, (3, 3)을 i와 j라고 하고, (2, 2)를 x1, y1, (1, 1)을 x2, y2, (0, 0)을 x3, y3이라고 해보자.
i에서 x1을 뺀 값과 j에서 y1를 뺀 값은 모두 1로 같다.
또한, i에서 x2를 뺀 값과 j에서 y2를 뺀 값은 모두 2로 같다.
세 번째 경우도 3으로 마찬가지로 동일하다.
두 번째로, 오른쪽 위 대각선 값들을 살펴보자.
동일하게 현재 퀸의 위치가 (3, 3)이라고 가정하면 오른쪽 대각선의 좌표는 (2, 4), (1, 5), (0, 6)이 된다.
마찬가지로 (3, 3)을 i, j로, (2, 4)를 x1, y1, (1, 5)를 x2, y2, (0, 6)을 x3, y3로 두고 
i, j값에서 x와 y를 뺀 값을 살펴보면 (1, -1), (2, -2), (3, -3)이 된다.

이 두 가지 케이스를 일반화하여 식으로 정리하면 adjacent 함수가 된다.

'''
